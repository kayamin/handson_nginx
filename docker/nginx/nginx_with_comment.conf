# nginx 設定の実験
# nginx.conf のコンテキストが main コンテキスト(一番外側のコンテキスト）でありここに他のコンテキストを読み込んでいく


user  nginx;
worker_processes  1; # worker プロセスは シングルスレッドで動作するためCPUはプロセスに付き１個しか使われない．性能を出したい場合はコア数程度に指定する
# workder_process auto; でコア数と同数のwokerを起動できる

error_log  /var/log/nginx/error.log debug; # 末尾で書き出すログのログレベルを指定する info, warn, error 等
pid        /var/run/nginx.pid; # pid を記述したファイルの配置先 kill 等で直接シグナルを送りたい場合に参照する


# イベントループ？に関する設定を行うコンテキスト
events {
  worker_connections  1024; # 1つのワーカープロセスが同時に受けられる接続数 client -> nginx -> backend で２つ使う
}


# http ディレクティブの コンテキスト, mainコンテキスト直下にのみ定義可能
http {

  include       /etc/nginx/mime.types; # types ディレクティブで 扱う Content-Type の一覧を設定する
  default_type  application/octet-stream; # 上記 include に失敗した場合には? default_type の値が適用される

  # ログファイルのフォーマットを定義する
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # 定義済みのログフォーマットを用いてログを出力する先を設定する
  access_log  /var/log/nginx/access.log  main;

  # ファイルの送信方法を示すディレクティブ？
  sendfile        on;
  #tcp_nopush     on;

  # サーバー側での keep alive のタイムアウト秒数設定，第２引数にクライアント側でのタイムアウト設定を追加可能
  keepalive_timeout  65;

  #gzip  on;

  # include ディレクティブ，他の設定ファイルをそのままこの部分に読み込むことができる
  # デフォルト設定で定義されている defalut.conf には server コンテキストが設定されており，ポート番号，使用するインターフェース，ホスト名等が定義されている
  # include /etc/nginx/conf.d/*.conf;

  server {
    listen 12345;  # 待ち受けるポート番号を指定, IPアドレス:port で特定のIPからのアクセスの場合のみ受け付ける設定も可能
                  # 下記 server_name が異なれば同じ port で複数の service を設定可能
                  # listen:80 default_server; とすると，どの service_name にも一致しなかった場合に適用されるものを設定できる

    server_name static.example.com; # バーチャルホストのホスト名を指定. 複数，ワイルドカード，正規表現での指定が可能
                                    # 複数の server_name にマッチする場合には 完全一致 -> *開始最長一致 -> *終了最長一致 -> 前から見ていって最初にマッチする正規表現 の順で解決される

    #access_log /var/log/nginx/static-access.log;
    #error_log /var/log/nginx/static-error.log;

    # 引数に指定されたパス名に対応するコンテキスト?を作る
    # 優先順位 完全一致指定 -> 前方一致最長かつ ^~ がついたもの -> 正規表現で最初に一致したもの -> 前方一致の最長のもの
    location /test {
      # root ディレクティブ そのロケーションに対してのドキュメントルートを設定（サーバー内でどのディレクトリを見るか）
      # /test/index.html へのアクセス -> 前方一致 /test でこのロケーションで処理 -> サーバー内の /www/dir/test/ 以下で index ディレクティブで指定されたファイルを返す
      # root ディレクティブの代わりに alias ディレクティブを用いると /www/dir/ 以下で index ディレクティブで指定されたファイルを返す
      # alias だと location 正規表現マッチ の場合に一致した文字列をそのまま使えたりする
      root /www/dir;
      # index ディレクティブ そのロケーションへのアクセスに対するレスポンスに使用するファイルを指定．ドキュメントルート以下で名称が一致するファイルが探され返される
      index index.html index.htm;

      # location はネストさせることもできる，主に優先順位の制御に用いる?
      location /test/path/ {
        location /test/path/subpath { # ネストしていてもパス名の比較は先頭から始まるので注意
        }
      }
    }
  }

  # docker-compose で立ち上げる springboot コンテナへのリバースプロキシ

  # upstream コンテキスト， server で proxy_pass を使う先の host の指定に使うことができる 例： proxy_pass http://test1;
  # 同じ upstream に複数のホストを設定すれば，ラウンドロビン方式でロードバランシング, どれかが落ちている場合には他のサーバーが自動的に選択される
  # 分散方式は 重み付け，フェイルオーバー，接続数分散，IPアドレスハッシュ，任意の接続情報(user-agent, url 等）からのハッシュ 等存在
  # 落ちている = 失敗判定 x 失敗した場合の設定
  # 失敗判定：接続不能，connect_timeout（接続が確立できない）, send_timeout(リクエストを送ったがレスポンスがない）, read_timeout(レスポンスが来ているが完了しない） で判定
  # 失敗した場合の設定：max_fails(何回の連続失敗で落ちているとみなすか), fail_timeout(失敗した後に何秒リクエストを控えるか）
  upstream test1 {
    server 172.18.0.2:8080;
  }


  server {
    listen 80;
    charset utf-8;

    location / {

      # proxy_pass の書き方によって動作が変わる
      # パス名を省略(ip:port まで）した場合: クラントから受信したパス名がそのままバックエンドに送られる
      # パス名を含めた場合：前方一致の location 指定でのみ使える，クライアントから受信したパス名からlocation でマッチした部分を取り除いたパス名 + 指定したパス名 をバックエンドに送る
      # -> url の前方部分を書き換えるだけで良ければ proxy_pass でOK フォワーディングが実現できる
      proxy_pass http://springboot:8080;

      # proxy_set_header ディレクティブ バックエンドにアクセスしてきたクライアントの情報を渡すために，ヘッダに情報付与する
      proxy_set_header Host $host:$server_port; # HOST ヘッダに 受信したHostヘッダ(nginxのホスト名）と ポートを設定する
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # クライアントのIPアドレスを設定，複数のリバースプロキシを経由する場合はここに , 区切りで先頭に IP を追加していく
      proxy_set_header X-Forwarded-Host $server_name; # リクエストを受け付けた server の server_name ディレクティブ値 を設定する ー＞　バーチャルホストの使い分けに使う？？
      proxy_set_header X-Real-IP $remote_addr; # クライアントのIPアドレス (直前のもののみ）

      add_header H-test dummy; # ヘッダーをレスポンスに追加する，エラーレスポンスの場合は付与されないので注意
    }

    # proxy_pass のパス名を含めた場合
    #location /path {
    #  # パス名を含める場合の例 (結構複雑，前方一致で一致した部分を除く -> 先頭に proxy_pass で指定されているパス部分を追加
    #  # /path1/test.gif -> /next/1/test.gif
    #  proxy_pass http://springboot:8080/next/;
    #
    #  # /path1/test.gif -> /next1/test.gif
    #  proxy_pass http://springboot:8080/next;
    #
    #}

    # proxy_pass のパス名を含めた場合2
    location /path {
      # /path/hello -> /hello
      proxy_pass http://springboot:8080/;
    }

    # http://localhost:80/forward_proxy1/hello -> http://springboot:8080/hello
    location /foward_proxy1 {
      rewrite     /foward_proxy1/(.*) /$1 break;
      proxy_pass  http://springboot:8080;
    }

    # http://localhost:80/foward_proxy2/2/addtwo -> http://springboot:8080/addtwo/2
    location /foward_proxy2 {
      rewrite     /foward_proxy2/(\d+)/(.*) /$2/$1 break;
      proxy_pass  http://springboot:8080;
    }


    # 正規表現を用いたパスの書き換えをやってみる
    #error_log   /var/log/nginx/example-error.log notice;
    rewrite_log on; # リライト処理のログを error_log に書き出す

    location /rewrite {
      rewrite ^/rewrite/  /foo;
      add_header H-rewrite dummy;

      proxy_pass http://springboot:8080;
    }
  }

  # バーチャルホストを設定する例 (example.com でも nginx のサーバーに名前解決される場合に対応する）
  # プロキシ時にパスを書き換える例
  server {
    server_name example.com;

    location /one/ {
      proxy_pass      http://test1/two/;
      # バクエンドからのリダイレクトURLをクライアントに返すときに ホスト名，パスを書き換えて適切な形式に変換する
      proxy_redirect  http://test1/two/ http://example.com/one/;
    }

    location /three/ {
      # rewrite ディレクティブで正規表現を用いたURL の書き換えができる
      # http://exmaple.com/three/1/file の正規表現に一致した /three/1 が /three/2 に置き換えられ http://exmaple.com/three/2/file に
      rewrite         ^/three/1 /three/2;

      # http://exmaple.com/three/2/file で location に前方一致した /three/ が /four/ に置き換えられるて http://exmaple.com/four/2/file に
      # proxy_pass では ホストだけ指定して, パス指定は rewrite 側に指定を任せたほうが良いのでは？？
      proxy_pass      http://test1/four/;

      # バックエンドからのリダイレクトURLをクライアントに返すときに URL を書き換えるルールを作成
      # http://test1/four/2/redirect -> http://exmaple.com/three/1/ に変換する
      # default(何も設定無し） だと http://exmaple.com/three/2/ に返してしまう
      #
      # 何が嬉しいか
      #   ・バックエンドのホスト名はクライアントはわからずに名前解決できない，書き換えたホスト名を nginx のホスト名に戻す必要がある
      #   ・nginx での書き換えルールを考慮して元の url 形式に戻せが redirect -> redirectされたurl にクライアントが nginx へアクセス となったときに nginx で適切に proxy 出来る
      proxy_redirect  http://test1/four/2 http://exmaple.com/three/1;
    }
  }

}